#!/bin/bash

## bcfv - Bash script the check, create and update checksums over dir tree

## MODE logic
# create (detault) 	: calculate all checksums
# update    		: calculate only checksums for changed files since the last checksum
# check			: check existing checksums

## QUIET logic		: print only changes + dirnames when changes

## Variables & constants
VERSION="0.9.3"
MODE="create"
DEFAULT_ALGO="b3"
QUIET=
#FORCE=
BASEDIR=
DATE=
TOUCH=
CHECKSUM=".checksum"

declare -a ALGO

## Functions

help() {
	echo "Usage: $(basename "$0") [-hqdcu] [-b DIR] DIR [DIR1 ...]"
	echo -e "\t-h\tDisplay help"
	echo -e "\t-q\tDo not print checksums"
	echo -e "\t-c\tCheck existing checksums"
	echo -e "\t-u\tUpdate changed checksums"
	echo -e "\t-l\tList checksums"
	echo -e "\t-t\tUpdate checksum timestamp even no checksums updated"
	echo -e "\t-d\tAdd date to previous checksum version"
	echo -e "\t-a ALGO\tSelect checksum algorithm: b3, md5, sha256, sha512. Default is ${DEFAULT_ALGO}"
	echo -e "\t-b DIR\tBase directory for the operations"
	echo -e "By default, the program will *create* checksums"
	echo -e "Version ${VERSION}"
	exit 0
}

# Print error message and exit
error() {
		MSG="${1}"
		echo "Error: ${MSG}"
		exit 1
}

# Print file modification time
file_mdate() {
	date -r "${1}" +"%Y%m%d"
}


# print the files present in a checksum file in sorted order
chksum_files() {
		# [ -f "${CHECKSUM_FILE}" ] && sed -E 's/([0-9a-f]+)[[:blank:]]+(.+)/\2/' -- "${1}" | sort
	  	[ -f "${1}" ] && cut -d \  -f 3- "${1}" | sort 

}

# list files in current dir in sorted order
list_files() {
	find . -maxdepth 1 -type f ! -name "${CHECKSUM}.*" -printf '%P\n' | sort
}

# usage: list_missing_files CHECKSUM_FILE
# list files not in CHECKSUM_FILE in sorted order
list_missing_files() {
	(( "${#}" == 1 )) || error "list_missing_files() expects a single argument"
	local CHECKSUM_FILE="${1}"
	if [ -f "${CHECKSUM_FILE}" ]; then 
		comm -23 <( list_files ) <( chksum_files  "${CHECKSUM_FILE}" )
	else
		list_files
	fi
}

# adds directory path in front of files read from pipe
print_path_chksum() {
	local DIR="  ${1}/"
	awk -v dir="${DIR}" '{ sub(/  /,dir,$0) }1'
}

print_path() {
	local DIR="${1}/"
	awk -v dir="${DIR}" '{ print dir $0 }'	
}


if [ ${#} -eq 0 ]; then
	help
fi

while getopts 'cudlhqtb:a:' option
do
# shellcheck disable=SC2220
	case "$option" in
	h)
		help
		;;
	q)
		QUIET="yes"
		;;
	c)
		MODE="check"
		;;
	u)
		MODE="update"
		;;
	l)
		MODE="list"
		;;
	d)
		DATE="yes"
		;;
	t)
		TOUCH="yes"
		;;
#   f)
#      FORCE="yes"
#      ;;
	a)
	case "${OPTARG}" in
		b3)
			ALGO+=( "b3" )
		;;
		sha256)
			ALGO+=("sha256" )
		;;
		sha512)
			ALGO+=( "sha512" )
		;;
		md5)
			ALGO+=( "md5" )
		;;
		*)
			echo "Unknown hash algorithm ${OPTARG}"
			exit 1
		;;
	esac
	;;
	b)
		BASEDIR="${OPTARG}"
		;;
	esac
done

# default algo
if (( ${#ALGO[@]} == 0 )); then
	ALGO+=( "${DEFAULT_ALGO}" )
fi

# check existence of checksum prog in PATH
for alg in "${ALGO[@]}"; do
	builtin type -p "${alg}sum" &> /dev/null || error "${alg}sum not found in PATH"
done

# Read rest of the params into DIRS
if [ -n "${BASEDIR}" ]; then
	pushd  "${BASEDIR}" > /dev/null || error "Cannot change into ${BASEDIR}"
fi
shift "$(( "$OPTIND" - 1 ))"
declare -a DIRS
while test "$#" -gt 0; do
		if [ -d "${1}" ]; then
				DIRS+=( "${1}" )
		fi
		shift
done

set -u

# shellcheck disable=SC2094

for dir in "${DIRS[@]}"; do
	# cd "${dir}" || continue
	while read -r d; do
		pushd "${d}"  > /dev/null || continue
		for alg in "${ALGO[@]}"; do
			CHECKSUM_FILE="${CHECKSUM}.${alg}"
			CHECKSUM_TMP="${CHECKSUM}.tmp"

			# clear previous interrupted run. Does not support parallel operation
			[ -f "${CHECKSUM_TMP}" ] && rm "${CHECKSUM_TMP}"

			if [ "${MODE}" = "check" ]; then
  				# [ -f "${CHECKSUM_FILE}" ] || continue
					# echo "# Directory: ${d}"
				if [ -n "${QUIET}" ]; then
					[[ -f "${CHECKSUM_FILE}" ]] && "${alg}sum" --check --quiet "${CHECKSUM_FILE}" | print_path "${d}"
				else
					[[ -f "${CHECKSUM_FILE}" ]] && "${alg}sum" --check "${CHECKSUM_FILE}" | print_path "${d}"
				fi
				list_missing_files "${CHECKSUM_FILE}" | print_path "${d}" | sed -e 's/$/: CHECKSUM MISSING/'

				continue

			elif [ "${MODE}" = "list" ]; then
				print_path_chksum "${d}" < "${CHECKSUM_FILE}"

				continue

			elif [ "${MODE}" = "update" ]; then
				touch "${CHECKSUM_TMP}"
				## [ -n "${QUIET}" ] || echo "# Directory: ${d}"

				# calculate checksums for files not present in CHECKSUM_FILE
				list_missing_files "${CHECKSUM_FILE}" | grep -v "${CHECKSUM_FILE}" | xargs -r -d "\n"  "${alg}sum" -- >> "${CHECKSUM_TMP}" 2>&1

				# calculate checksum for files IN CHECKSUM_FILE modified later than then CHECKSUM_FILE
				if [ -s "${CHECKSUM_FILE}" ]; then
					while read -r line; do
						file="$(echo "${line}" | sed -E 's/([0-9a-f]+)[[:blank:]]+(.+)/\2/')"
						if [ -f "${file}" ] && [ "${file}" != "${CHECKSUM_FILE}" ];then
							if [ "${file}" -nt "${CHECKSUM_FILE}" ]; then
								"${alg}sum" -- "${file}" >> "${CHECKSUM_TMP}" 2>&1
							else
								echo "${line}" >> "${CHECKSUM_TMP}"
							fi
						fi
					done < "${CHECKSUM_FILE}"

					# sort in-place
					sort -k 2 -o "${CHECKSUM_TMP}" "${CHECKSUM_TMP}"

					# keep the old checksum file if there isn't any difference
					diff "${CHECKSUM_FILE}" "${CHECKSUM_TMP}" | grep  '^[<>]' > "${CHECKSUM_TMP}.DIFF"
					if [ "${PIPESTATUS[0]}" = "0" ]; then
						# -t / TOUCH update the checksums even nothing has changed. 
						[ -n "${TOUCH}" ] && touch "${CHECKSUM_FILE}"  
						rm "${CHECKSUM_TMP}" "${CHECKSUM_TMP}.DIFF"
						continue
					else
						# print dir name if QUIET
						# [ -n "${QUIET}" ] && echo "# Directory: ${d}"
						print_path_chksum "${d}" < "${CHECKSUM_TMP}.DIFF"
						rm "${CHECKSUM_TMP}.DIFF"
						# update checksum, make it a function first
					fi
				else
 
					if [ -n "${QUIET}" ]; then
						list_files | xargs -r -d "\n" "${alg}sum" -- > "${CHECKSUM_TMP}" 2>&1
						if [ -s "${CHECKSUM_TMP}" ]; then
							# echo "# Directory: ${d}"
							print_path_chksum "${d}" < "${CHECKSUM_TMP}"
						fi
					else
						list_files | xargs -r -d "\n" "${alg}sum" -- | tee "${CHECKSUM_TMP}" | print_path_chksum "${d}"
					fi
				fi

			else	# create
				# echo "# Directory: ${d}"
				 touch "${CHECKSUM_TMP}"
				if [ -n "${QUIET}" ]; then
					list_files | xargs -r -d "\n" "${alg}sum" -- > "${CHECKSUM_TMP}" # 2>&1
				else
					list_files | xargs -r -d "\n" "${alg}sum" -- | tee "${CHECKSUM_TMP}" | print_path_chksum "${d}"
				fi
			fi

			if [ -n "${DATE}" ] && [ -f "${CHECKSUM_FILE}" ]; then
				mv "${CHECKSUM_FILE}" "${CHECKSUM_FILE}_$(file_mdate "${CHECKSUM_FILE}")"
			fi
			mv "${CHECKSUM_TMP}" "${CHECKSUM_FILE}"
			# delete empty checksum files
			[ ! -s "${CHECKSUM_FILE}" ] && rm "${CHECKSUM_FILE}"

		done
		popd > /dev/null || error "Could not return to dir"
	done < <(find  "${dir}" -type d)
done

if [ -n "${BASEDIR}" ]; then
	popd > /dev/null  || error "Could not return to dir"
fi
